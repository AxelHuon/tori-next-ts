// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id     Int     @id @default(autoincrement())
  name   String
  animes Anime[] @relation("AnimeGroups")
  users  User[]  @relation("UserGroups")
  Anime  Anime[]
  User   User[]
}

model Anime {
  id             Int        @id @default(autoincrement())
  mal_id         Int
  title          String?
  title_english  String?
  title_japanese String?
  type           String?
  source         String?
  episodes       Int?
  status         String?
  airing         Boolean?
  airedFrom      DateTime?
  airedTo        DateTime?
  rating         String?
  score          Float?
  scored_by      Int?
  rank           Int?
  popularity     Int?
  members        Int?
  favorites      Int?
  synopsis       String?    @db.Text
  season         String?
  year           Int?
  images         Image?     @relation(fields: [imagesId], references: [id])
  trailer        Trailer?   @relation(fields: [trailerId], references: [id])
  producers      Producer[]
  licensors      Licensor[]
  studios        Studio[]
  genres         Genre[]
  imagesId       Int
  trailerId      Int
  Group          Group?     @relation(fields: [groupId], references: [id])
  groupId        Int?
  groups         Group[]    @relation("AnimeGroups")
}

model Image {
  id             Int     @id @default(autoincrement())
  jpg_image_url  String?
  jpg_small_url  String?
  jpg_large_url  String?
  webp_image_url String?
  webp_small_url String?
  webp_large_url String?
  anime          Anime[]
}

model Trailer {
  id              Int     @id @default(autoincrement())
  youtube_id      String?
  url             String?
  embed_url       String?
  maximum_img_url String?
  anime           Anime[]
}

model Producer {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  url   String
  anime Anime[]
}

model Licensor {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  url   String
  anime Anime[]
}

model Studio {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  url   String
  anime Anime[]
}

model Genre {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  url   String
  anime Anime[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groups        Group[]   @relation("UserGroups")
  Group         Group?    @relation(fields: [groupId], references: [id])
  groupId       Int?
  firstName     String?
  lastName      String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
